
/*
 * 题意：几个人拍成一排，每一个人的高度全都是不一样的，给你队伍中的人数和从前面看，后面能看到的人数，问
 * 这个队伍一共有几种排列。
 *
 * 思路：自己没想出来，看的题解
 * ********************************************************
 * 有三个不同的维度：总人数N，从前看到的人P，从后看到的人R。
 * 假设现在队列由i-1个人变成了i个，由于谁后进到队列是无所谓的，不妨假设最矮的人是最后一个进入队列的，
 * 那么其所占的位置会有三种情况，第一种情况是站在队首，增加1个在前面能看到的人数，第二种情况是站在队尾，
 * 增加1个在后面能看到的人数，第三种情况是站在队伍中间，一共有i-2个位置可以站，但不会增加可见的人数。
 * 这样就能得到：
 * dp[i][j][k]=dp[i-1][j-1][k]+dp[i][j][k-1]+(i-2)*dp[i-1][j][k]
 * ********************************************************
 *
 * 理解：这是我在做动态规划中从来没有接触过，或者是“敢”想到的一方面就是把人从高到低进行排列
 * 原来以为这种思想得出来的解是片面的。其实这种想法是一种捷径。是一种新的手段。
 */

#include <algorithm>
#include <iostream>

using namespace std;

const int MAX = 20;

int T, N, F, E;
long long dp[MAX][MAX][MAX];

int main() {

	dp[1][1][1] = 1;
	for(int i=2; i<=13; i++){
		for(int j=1; j<=i; j++){
			for(int k=1; k<=i; k++){
				dp[i][j][k] = dp[i-1][j-1][k] + dp[i-1][j][k-1] + (i-2)*dp[i-1][j][k];
			}
		}
	}

	cin>>T;
	while(T--){
		cin>>N>>F>>E;
		cout<<dp[N][F][E]<<endl;
	}

	return 0;
}
